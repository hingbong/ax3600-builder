#!/bin/bash

# --- Configuration ---
URL_PCDN="https://raw.githubusercontent.com/privacy-protection-tools/anti-AD/master/discretion/pcdn.txt"
URL_DNS="https://raw.githubusercontent.com/privacy-protection-tools/anti-AD/master/discretion/dns.txt"
EXCLUDE_DOMAIN="placeholder" # Domain to exclude exactly (e.g., mylocalserver.lan)
TARGET_IP_V4="0.0.0.0"       # Target IPv4 address for blocking
TARGET_IP_V6="::"           # Target IPv6 address for blocking
OUTPUT_FILE="generated_hosts.txt" # Name of the output file
TEMP_FILE=$(mktemp)         # Create a temporary file for processing

# --- Ensure cleanup on exit ---
# Make trap more robust: check if file exists before removing
trap '[[ -f "$TEMP_FILE" ]] && rm -f "$TEMP_FILE"; echo "Cleaned up temporary file."' EXIT INT TERM HUP

# --- Functions ---
fetch_domains() {
    local url="$1"
    echo "Fetching domains from: $url" >&2
    # Use curl: -s silent, -L follow redirects, --fail exit non-zero on server error, || handle errors
    curl -sL --fail "$url" || { echo "Error: Failed to fetch domains from $url (curl exit code: $?)" >&2; return 1; }
}

# --- Main Logic ---
echo "Starting hosts file generation..."

# Fetch domains from both URLs and combine into the temporary file
# Use a subshell and capture success/failure for better error handling
fetch_success=0
{
    if fetch_domains "$URL_PCDN"; then
        fetch_success=1
    fi
    if fetch_domains "$URL_DNS"; then
        fetch_success=1 # Mark success if at least one fetch worked
    fi
} > "$TEMP_FILE"

# Check if fetching resulted in an empty temp file OR if neither fetch succeeded
if [[ ! -s "$TEMP_FILE" ]] || [[ $fetch_success -eq 0 ]]; then
    echo "Error: Failed to retrieve any valid domains from the source URLs." >&2
    # Optional: Keep the empty header file? Or remove it? Let's remove it.
    rm -f "$OUTPUT_FILE"
    exit 1
fi

echo "Processing domains and generating $OUTPUT_FILE..."

# Add header to the output file
cat > "$OUTPUT_FILE" << EOF
# === Custom Hosts File ===
# Generated by script on: $(date)
# Source lists:
# - ${URL_PCDN}
# - ${URL_DNS}
# Target IPs: ${TARGET_IP_V4} (IPv4) and ${TARGET_IP_V6} (IPv6)
# Excluded Domain: ${EXCLUDE_DOMAIN}
# =========================

EOF

# Process the combined list from the temporary file:
# 1. grep -vE '^\s*#|^\s*$': Remove lines starting with '#' (comments) and empty/whitespace-only lines.
# 2. sed 's/^\s*//; s/\s*$//': Trim leading/trailing whitespace from each line.
# 3. grep -Fxv "$EXCLUDE_DOMAIN": Remove the exact domain specified for exclusion (-F: fixed string, -x: match whole line).
# 4. sort -u: Sort the domains alphabetically and remove duplicates.
# 5. awk: Process each unique, non-empty, non-excluded domain:
#    - -v ip4="$TARGET_IP_V4" -v ip6="$TARGET_IP_V6": Pass IPs to awk.
#    - '{ if ($0 != "") { print ip4 "\t" $0; print ip6 "\t" $0 } }': If the line (domain) is not empty,
#      print the IPv4 line THEN the IPv6 line, both followed by a tab and the domain.
# 6. >> "$OUTPUT_FILE": Append the formatted lines to the output file.

domain_count=0
while IFS= read -r domain; do
    # Double-check domain isn't empty after processing steps, though awk handles this
    if [[ -n "$domain" ]]; then
        echo -e "${TARGET_IP_V4}\t${domain}" >> "$OUTPUT_FILE"
        echo -e "${TARGET_IP_V6}\t${domain}" >> "$OUTPUT_FILE"
        ((domain_count++))
    fi
# Use Process Substitution <(...) to feed the processed list line-by-line
done < <(grep -vE '^\s*#|^\s*$' "$TEMP_FILE" | \
         sed 's/^\s*//; s/\s*$//' | \
         grep -Fxv "$EXCLUDE_DOMAIN" | \
         sort -u)


# Check if any domains were actually added
if [[ $domain_count -eq 0 ]]; then
    echo "Warning: No valid domains (excluding ${EXCLUDE_DOMAIN}) were found in the source lists or added to the file."
else
    # Each domain adds 2 lines (IPv4 + IPv6)
    total_lines_added=$(( domain_count * 2 ))
    echo "Successfully generated ${OUTPUT_FILE} with ${total_lines_added} host entries (for ${domain_count} unique domains)."
fi

# Temporary file is automatically removed by the trap EXIT handler
exit 0

